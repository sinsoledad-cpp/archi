// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"archi/internal/event/article"
	"archi/internal/repository"
	"archi/internal/repository/cache"
	"archi/internal/repository/dao"
	"archi/internal/service"
	"archi/internal/web"
	"archi/internal/web/middleware/jwt"
	"archi/ioc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() *App {
	cmdable := ioc.InitRedis()
	handler := jwt.NewRedisJWTHandler(cmdable)
	logger := ioc.InitLogger()
	v := ioc.InitGinMiddlewares(handler, logger)
	db := ioc.InitMySQL(logger)
	userDAO := dao.NewGORMUserDAO(db)
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewCachedUserRepository(userDAO, userCache)
	userService := service.NewUserService(logger, userRepository)
	codeCache := cache.NewRedisCodeCache(cmdable)
	codeRepository := repository.NewCachedCodeRepository(codeCache)
	smsService := ioc.InitSMSService()
	codeService := service.NewDefaultCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(logger, userService, codeService, handler)
	articleDAO := dao.NewGORMArticleDAO(db)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := repository.NewCachedArticleRepository(articleDAO, userRepository, articleCache)
	client := ioc.InitSaramaClient()
	syncProducer := ioc.InitSyncProducer(client)
	producer := article.NewSaramaSyncProducer(syncProducer)
	articleService := service.NewDefaultArticleService(articleRepository, producer)
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	interactiveCache := cache.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache, logger)
	interactiveService := service.NewDefaultInteractiveService(interactiveRepository)
	articleHandler := web.NewArticleHandler(articleService, interactiveService, logger)
	engine := ioc.InitWebEngine(v, logger, userHandler, articleHandler)
	readEventConsumer := article.NewReadEventConsumer(interactiveRepository, client, logger)
	v2 := ioc.InitConsumers(readEventConsumer)
	redisRankingCache := cache.NewRedisRankingCache(cmdable)
	localRankingCache := cache.NewLocalRankingCache()
	rankingRepository := repository.NewCachedRankingRepository(redisRankingCache, localRankingCache)
	rankingService := service.NewBatchRankingService(interactiveService, articleService, rankingRepository)
	rlockClient := ioc.InitRlockClient(cmdable)
	rankingJob := ioc.InitRankingJob(rankingService, rlockClient, logger)
	cron := ioc.InitJobs(logger, rankingJob)
	app := &App{
		engine:    engine,
		consumers: v2,
		cron:      cron,
	}
	return app
}

// wire.go:

var thirdPartyProviderSet = wire.NewSet(ioc.InitLogger, ioc.InitMySQL, ioc.InitRedis, ioc.InitRlockClient, ioc.InitSaramaClient)

var userSvcProviderSet = wire.NewSet(cache.NewRedisUserCache, dao.NewGORMUserDAO, repository.NewCachedUserRepository, service.NewUserService)

var codeSvcProviderSet = wire.NewSet(cache.NewRedisCodeCache, repository.NewCachedCodeRepository, ioc.InitSMSService, service.NewDefaultCodeService)

var articleSvcProviderSet = wire.NewSet(cache.NewRedisArticleCache, dao.NewGORMArticleDAO, repository.NewCachedArticleRepository, service.NewDefaultArticleService)

var interactiveSvcProviderSet = wire.NewSet(cache.NewRedisInteractiveCache, dao.NewGORMInteractiveDAO, repository.NewCachedInteractiveRepository, service.NewDefaultInteractiveService)

var rankingSvcProviderSet = wire.NewSet(cache.NewRedisRankingCache, cache.NewLocalRankingCache, repository.NewCachedRankingRepository, service.NewBatchRankingService)

var eventsProviderSet = wire.NewSet(ioc.InitSyncProducer, ioc.InitConsumers, article.NewSaramaSyncProducer, article.NewReadEventConsumer)

var handlerProviderSet = wire.NewSet(jwt.NewRedisJWTHandler, web.NewUserHandler, web.NewArticleHandler)

var jobProviderSet = wire.NewSet(ioc.InitRankingJob, ioc.InitJobs)
